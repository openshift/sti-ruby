#!/bin/bash
#
# Test the Ruby S2I image in OpenShift (local cluster)
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
# VERSION specifies the major version of the Ruby runtime in format of X.Y
# OS specifies RHEL version (e.g. OS=rhel7)
#

THISDIR=$(dirname ${BASH_SOURCE[0]})

source ${THISDIR}/test-lib-ruby.sh

set -exo nounset

trap ct_os_cleanup EXIT SIGINT

ct_os_check_compulsory_vars

ct_os_cluster_up

# test with the just built image and an integrated template
test_ruby_integration "${IMAGE_NAME}" "${VERSION}" "${IMAGE_NAME}:${VERSION}"

# test with a released image and an integrated template
fail_not_released=true
if [ "${OS}" == "rhel7" ] ; then
  PUBLIC_IMAGE_NAME=${PUBLIC_IMAGE_NAME:-${REGISTRY:-registry.redhat.io/}rhscl/${BASE_IMAGE_NAME}-${VERSION//./}-rhel7}
else
  PUBLIC_IMAGE_NAME=${PUBLIC_IMAGE_NAME:-${REGISTRY:-}centos/${BASE_IMAGE_NAME}-${VERSION//./}-centos7}
  fail_not_released=false
fi

export CT_SKIP_UPLOAD_IMAGE=true
# Try pulling the image first to see if it is accessible
if docker pull "${PUBLIC_IMAGE_NAME}"; then
  test_ruby_integration ruby "${VERSION}" "${PUBLIC_IMAGE_NAME}"
else
  echo "Warning: ${PUBLIC_IMAGE_NAME} could not be downloaded via 'docker'"
  ! $fail_not_released || false "ERROR: Failed to pull image"
fi

OS_TESTSUITE_RESULT=0

ct_os_cluster_down

